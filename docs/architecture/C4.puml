@startuml C4-L1-System-Context
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title C4 Level 1 - System Context (Zielzustand)

Person(user, "Nutzer", "Verwendet die Batch-UI")
System(frontend, "Browser/Frontend", "Statisches HTML/CSS/JS, ausgeliefert über NGINX")
System(api, "Backend (Flask API)", "Gunicorn/WSGI")
SystemDb(db, "SQLite", "Persistenz: app.db oder /data/app.db")
System_Ext(openai, "OpenAI API", "Externes LLM")

Rel(user, frontend, "Bedient")
Rel(frontend, api, "HTTPS: GET /health und /api/*")
Rel(api, db, "SQL Lese-/Schreibzugriffe")
Rel(api, openai, "Prompts/Completions")

@enduml

@startuml C4-L2-Container
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title C4 Level 2 - Container (Zielzustand)

Person(user, "Nutzer", "Verwendet die Batch-UI")
Container_Ext(browser, "Browser Frontend", "HTML/CSS/JS", "Client-seitig ausgeführt")
System_Boundary(compose, "Docker Compose Umgebung") {
  Container(nginx, "NGINX", "Web Server", "Liefert statische Assets")
  Container(api, "Flask API", "Python / Gunicorn", "REST Endpunkte")
  ContainerDb(sqlite, "SQLite", "Datei-basierte DB", "app.db oder /data/app.db")
}
System_Ext(openai, "OpenAI API", "Externes LLM")

Rel(user, browser, "Bedient")
Rel(browser, nginx, "GET statische Dateien")
Rel(browser, api, "HTTPS JSON: /api/*, /health")
Rel(api, sqlite, "Dateizugriff SQL")
Rel(api, openai, "HTTPS")

@enduml

@startuml C4-L3-Komponenten-Backend
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title C4 Level 3 - Komponenten (Backend, Zielzustand)

Container_Boundary(api, "Flask API") {
  Component(api_layer, "API Layer (Blueprint konsolidiert)", "Flask Blueprint", "Routing und Validierungs-Endpoints")
  Component(llm_service, "LLM Service", "Python", "Wrapper um OpenAI API")
  Component(db_access, "DB Access", "Python / sqlite3", "CRUD auf SQLite")
  Component(settings, "Settings/Config", "Python", "Konfiguration und Feature Flags")
  Component(utils, "Utils", "Python", "Hilfsfunktionen")
  Component(wsgi, "App-Factory/WSGI", "Python", "Erzeugt Flask-App, registriert Blueprints")
}

ContainerDb(sqlite, "SQLite", "Datei", "app.db")
System_Ext(openai, "OpenAI API", "Externes LLM")
Container_Ext(browser, "Browser Frontend", "HTML/CSS/JS", "Client")

Rel(browser, api_layer, "HTTP JSON")
Rel(wsgi, api_layer, "Initialisiert/registriert")
Rel(wsgi, settings, "lädt")
Rel(api_layer, llm_service, "Verwendet")
Rel(api_layer, db_access, "Persistiert/liest")
Rel(api_layer, utils, "Verwendet")
Rel(db_access, sqlite, "SQL")
Rel(llm_service, openai, "HTTPS")

' Endpoints als Note
note right of api_layer
  Endpunkte (Zielzustand):
  - GET /health
  - GET /api/demo/requirements
  - POST /api/validate
  - POST /api/validate/parallel
  - POST /api/validate/batch
  - GET/POST /api/validate/config
  - POST /api/v1/corrections/text (und decisions)
end note

' Referenzen zu Codeartefakten (Ist-Zustand) als Hinweis
note bottom
  Relevante Dateien (Ist):
  - backend_app/api.py
  - backend_app/api_optimized.py
  - backend_app/db.py
  - backend_app/llm.py
  - backend_app/settings.py
  - backend_app/__init__.py
  - wsgi.py
end note

@enduml