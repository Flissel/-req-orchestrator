version: '3.8'
services:
  fastapi-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production-fastapi
    container_name: requirements-fastapi-backend
    env_file:
      - .env
    environment:
      # Fallbacks, falls .env fehlt
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      SQLITE_PATH: ${SQLITE_PATH:-/app/data/app.db}
    ports:
      - "8087:8000"   # Direktzugriff ohne Proxy
    volumes:
      - ./data:/app/data
      - ./docs:/app/docs:ro
      - ./config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Optional: Qdrant Vector-DB (HTTP 6333/grpc 6334), Host-Ports via 6401/6402
  qdrant:
    image: qdrant/qdrant:latest
    container_name: requirements-qdrant
    profiles: ["infra"]
    ports:
      - "6401:6333"
      - "6402:6334"
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - ./data/qdrant:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # Optional: Nginx als Reverse-Proxy (Frontend + /api/* an FastAPI)
  nginx:
    image: nginx:alpine
    container_name: requirements-nginx
    profiles: ["proxy"]
    ports:
      - "8080:80"   # Proxy-Einstieg
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./fastapi_frontend.html:/usr/share/nginx/html/index.html:ro
      - ./frontend:/usr/share/nginx/html:ro
    depends_on:
      - fastapi-backend
    restart: unless-stopped
